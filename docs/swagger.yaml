basePath: /api
definitions:
  LoginSwagger:
    properties:
      email:
        description: The email for user
        example: dat1@gmail.com
        type: string
      password:
        description: The password for user
        example: "123456789"
        type: string
    required:
    - email
    - password
    type: object
  RegisterSwagger:
    properties:
      email:
        description: The email for user
        example: dat1@gmail.com
        type: string
      name:
        description: The name for user
        example: dat
        type: string
      password:
        description: The password for user
        example: "123456789"
        type: string
    required:
    - email
    - name
    - password
    type: object
host: localhost:9090
info:
  contact: {}
  description: This is demo server
  title: Swagger demo service API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: The body to login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/LoginSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Login
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register new user
      parameters:
      - description: The body to register
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/RegisterSwagger'
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Register
      tags:
      - Auth
  /user/getall:
    get:
      consumes:
      - application/json
      description: Get All Users
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: Get All Users
      tags:
      - Users
  /user/profile/{name}:
    get:
      consumes:
      - application/json
      description: Get Profile by name
      parameters:
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: success
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
        "500":
          description: Server error
          schema:
            type: string
      summary: GetProfileByName
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: hearder
    name: Authorization
    type: apiKey
swagger: "2.0"
